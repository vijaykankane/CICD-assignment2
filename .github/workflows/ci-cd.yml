# GitHub Actions CI/CD Pipeline for Beginners
# This file should be saved as .github/workflows/ci-cd.yml

name: CI/CD Pipeline

# When to run this workflow
on:
  # Run on every push to main and staging branches
  push:
    branches: [ main, staging ]
  # Run on pull requests to main branch
  pull_request:
    branches: [ main ]
  # Run when a release is created (for production deployment)
  release:
    types: [published]

# Define the jobs
jobs:
  # Job 1: Test the application
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get the code from GitHub
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Step 2: Setup Python
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    
    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Step 4: Run tests
    - name: Run tests
      run: |
        pytest -v
  
  # Job 2: Deploy to Staging (runs only on staging branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test  # Wait for tests to pass
    if: github.ref == 'refs/heads/staging'  # Only run on staging branch
    
    steps:
    # Step 1: Get the code
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Step 2: Setup Python
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    
    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Step 4: Deploy to staging (simulation - just print message)
    - name: Deploy to Staging Environment
      run: |
        echo "üöÄ Deploying to STAGING environment..."
        echo "‚úÖ App deployed to staging server!"
        echo "üåê Staging URL: https://your-app-staging.herokuapp.com"
    
    # Step 5: Run health check
    - name: Health Check - Staging
      run: |
        echo "üè• Running health check on staging..."
        echo "‚úÖ Staging environment is healthy!"

  # Job 3: Deploy to Production (runs only on release)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test  # Wait for tests to pass
    if: github.event_name == 'release' &&  always()
    steps:
    # Step 1: Get the code
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Step 2: Setup Python
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    
    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Step 4: Deploy to production (simulation - just print message)
    - name: Deploy to Production Environment
      run: |
        echo "üöÄ Deploying to PRODUCTION environment..."
        echo "‚úÖ App deployed to production server!"
        echo "üåê Production URL: https://your-app.herokuapp.com"
    
    # Step 5: Run health check
    - name: Health Check - Production
      run: |
        echo "üè• Running health check on production..."
        echo "‚úÖ Production environment is healthy!"
    
    # Step 6: Send notification (simulation)
    - name: Send Success Notification
      run: |
        echo "üìß Sending success notification..."
        echo "‚úÖ Deployment successful! Version ${{ github.event.release.tag_name }} is live!"
